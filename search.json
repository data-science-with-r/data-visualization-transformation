[
  {
    "objectID": "slides/ggplot2/script.html",
    "href": "slides/ggplot2/script.html",
    "title": "Data visualization and transformation",
    "section": "",
    "text": "Hello, in this video we’re going to talk about the specifics and syntax of visualizing data with the ggplot2 package and we’re going to do so using data on penguins!\n\n\n\n\n\nA quick reminder that ggplot2 is tidyverse’s data visualization package\n\n\nThe structure of ggplot2 code looks almost always is the same: we start with the ggplot function where the first argument is the data that you want to plot and the second argument defines the aesthetic mappings using the aes function – in this template we have only defined the x and y aesthetics, for example. This one is somewhat unusual, you’re passing a function, aes, as the argument of another function, ggplot. You’ll see more of this as we progress through the course, though more often you’ll see data frame or variable names being passed to function arguments. and then we add on another layer – a geom layer – which defines the geometric shapes with which you want to represent your data and then optionally, though in many cases are recommendedly, we add further layers to the plot to make our plot a little bit easier to read, a little bit easier to glean information from.\n\n\n\n\n\n\n\nThe data that we’re working with is called penguins. It comes from the palmerpenguins package, and we also need the tidyverse package for our analyses.\n\n\nSo let’s load those packages first And then glimpse at the data. glimpse is a function that prints out the variables in the data frame, their types – which we’ll dig deeper into later in the course –, and the first few observations as comma separated values.\n\n\nThe data contains body measurements on three species of penguins, chinstrap, gentoo, and adelie. The bodu measurements include things like bill length and depth, flipper length, and body mass. We also know which island the penguin is on, their sec, and the year of data collection. There are a total of 8 columns, so 8 variables.\nThe output also shows that we have 344 rows, that is, we have data on 344 penguins.\n\n\n\n\n\nThe plot shown here is our final goal. We’ll plot bill length against bill depth, both measured in millimeters. We’ll represent each penguin with a point, colored by their species. The species mappings are summarized in the legend of the plot. The plot also has a title, a subtitle, and a caption.\n–&gt; [other tab] And the code for the plot is shown here. It looks like what we’ve seen before – ggplot function to start with, then the data, the aesthetic mappings, the geom, and some other layers for labels and color palette. This is a lot of code at once though, so let’s unpack it layer by layer.\n\n\n\n\n\nIn other words, let’s code out loud!\n\n\n\n\n\nWe start with the ggplot function and indicate that we want to plot the penguins data frame. As a result, we get an empty canvas that we can paint our data on.\n\n\n\n\n\nThem we map bill depth to the x-axis &gt;&gt; we can see the x-axis indicates the variable name, its range, and a reasonable breakpoint\n\n\n\n\n\nThen we map bill length to the y-axis &gt;&gt; we can see the y-axis mapped as well\n\n\n\n\n\nAnd finally &gt;&gt; we add a geom layer – a geom point, indicating that the data should be represented as points. There seems to be three clusters of points here, let’s see what happens if we also ask that the points be colored by species.\n\n\n\n\n\nSince this requires mapping another variable to a new aesthetic of the plot, we do this in the aesthetic mappings &gt;&gt; mapping color to species. Note that not only the points are colored, but we also gained a legend describing the mappings – red points represent Adelie penguins, green Chinstrap, blue Gentoo.\n\n\n\n\n\nNow that the data we want to see on our plot is there, let’s add some labels.\n\n\nLet’s set the title to Bill depth and length. Not a particularly informative title, but it’s a good starting point. We do this in the labs function, passing it to the title argument as a character string denoted with quotes. You can use double or single quotes in R, sticking to the tidyverse style guide we’ll use double quotes.\n\n\n\n\n\n\n\nLet’s also add a subtitle\n\n\nAgain in the labs function, passing it to the subtitle argument.\n\n\n\n\n\n\n\nAnd let’s fix up the x and y axis labels.\n\n\nBy default ggplot2 will use the variable names, but we can overwrite them by updating the x and y label of the plot, and using more human-friendly text like bill depth mm and bill length mm.\n\n\n\n\n\n\n\nAnd finally let’s relabel the legend as well\n\n\nWe do this also in the labs function, passing the desired label to the color argument. Note that the name of the argument matches the aesthetic mapping.\n\n\n\n\n\n\n\nAnd finally in the labels\n\n\nlet’s add a caption for the data source. This automatically gets placed below the plot.\n\n\n\n\n\n\n\nAnd before we finish up our plot we need to do one more thing – use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness.\n\n\nWe do this in a new layer, a scale layer, using a pre-defined color palette called viridis. The underscore-d denotes we will use the discrete color scale in this palette. If you have red-green color vision deficiency up until this point some of the points on the plot may have been difficult to tell apart. The goal with this palette is to make sure all, or at least more, viewers can see the points as intended.\n\n\n\n\n\n\n\nPutting it altogether we have our code\n–&gt; The resulting plot –&gt; And the narrative we built with each layer of the plot\n\n\n\n\n\nBefore we wrap up this introduction to ggplot2, one quick note about argument names. It’s common in R to omit the names of the first two arguments. In the ggplot function\n\n\nthese are data and mapping So you’ll commonly see me and others write ggplot code in the second way, omitting these argument names from the code."
  },
  {
    "objectID": "code-alongs/ggplot2.html",
    "href": "code-alongs/ggplot2.html",
    "title": "Visualizing Starwars characters",
    "section": "",
    "text": "Load packages.\n\nGlimpse at the starwars data frame.\n\n\nglimpse(starwars)\n\nRows: 87\nColumns: 14\n$ name       &lt;chr&gt; \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Or…\n$ height     &lt;int&gt; 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2…\n$ mass       &lt;dbl&gt; 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.…\n$ hair_color &lt;chr&gt; \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N…\n$ skin_color &lt;chr&gt; \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"…\n$ eye_color  &lt;chr&gt; \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",…\n$ birth_year &lt;dbl&gt; 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, …\n$ sex        &lt;chr&gt; \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",…\n$ gender     &lt;chr&gt; \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini…\n$ homeworld  &lt;chr&gt; \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooine\", \"Alderaan\", \"T…\n$ species    &lt;chr&gt; \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma…\n$ films      &lt;list&gt; &lt;\"A New Hope\", \"The Empire Strikes Back\", \"Return of the J…\n$ vehicles   &lt;list&gt; &lt;\"Snowspeeder\", \"Imperial Speeder Bike\"&gt;, &lt;&gt;, &lt;&gt;, &lt;&gt;, \"Imp…\n$ starships  &lt;list&gt; &lt;\"X-wing\", \"Imperial shuttle\"&gt;, &lt;&gt;, &lt;&gt;, \"TIE Advanced x1\",…\n\n\n\nModify the following plot to change the color of all points to \"pink\".\n\n\nggplot(\n  starwars, \n  aes(x = height, y = mass, color = gender, size = birth_year)\n  ) +\n  geom_point(color = \"pink\")\n\nWarning: Removed 51 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\nAdd labels for title, x and y axes, and size of points. Uncomment to see the effect.\n\n\nggplot(\n  starwars, \n  aes(x = height, y = mass, color = gender, size = birth_year)\n  ) +\n  geom_point(color = \"#30509C\") +\n  labs(\n    title = \"Mass vs. height of Starwars Characters\",\n    x = \"Height (cm)\", \n    y = \"Body mass (kg)\",\n    size = \"Birth year\"\n  )\n\nWarning: Removed 51 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\nPick a single numerical variable and make a histogram of it. Select a reasonable binwidth for it.\n\n(A bit of starter code is provided below, and the code chunk is set to not be evaluated with eval: false because the current code in there is not valid code and hence the document wouldn’t knit. Once you replace the code with valid code, set the chunk option to eval: true, or remove the eval option altogether since it’s set to true by default.)\n\nggplot(starwars, aes(x = height)) +\n  geom_histogram(binwidth = 10)\n\n\n\n\n\n\n\n\n\nPick a numerical variable and a categorical variable and make a visualization (you pick the type!) to visualization the relationship between the two variables. Along with your code and output, provide an interpretation of the visualization.\n\n\n# add code here\n\nInterpretation goes here…\n\nPick a single categorical variable from the data set and make a bar plot of its distribution.\n\n\n# add code here\n\n\nPick two categorical variables and make a visualization to visualize the relationship between the two variables. Along with your code and output, provide an interpretation of the visualization.\n\n\n# add code here\n\nInterpretation goes here…\n\nPick two numerical variables and two categorical variables and make a visualization that incorporates all of them and provide an interpretation with your answer.\n\n(This time no starter code is provided, you’re on your own!)\n\n# add code here\n\nAdd your interpretation here."
  },
  {
    "objectID": "exercises/iris-data-visualization.html",
    "href": "exercises/iris-data-visualization.html",
    "title": "Visualizing Iris Flowers",
    "section": "",
    "text": "Please see (link webR activity) for a guide on how to interact with the different question types for the following activity.\n\n\nWe’ll use: tidyverse for majority of the activity and scales for pretty plot labels. These are ready to use for you in this activity!\n\nlibrary(tidyverse)\nlibrary(scales)\n\n\n\n\nAttaching package: 'gridExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\n\n\n\n\nWe will use the iris dataset for this activity. This dataset is pre-packaged for you to use in R (Fisher 1936).\nThe iris dataset contains four features (length and width of sepals and petals) of three species of Iris (Iris setosa, Iris virginica and Iris versicolor). A sepal is the outer parts of the flower (often green and leaf-like) that enclose a developing bud. The petal are parts of a flower that are the pollen producing part of the flower that are often conspicuously colored. The data were collected in 1936 at the Gaspé Peninsula, in Canada. The difference between sepals and petals can be seen below.\n\n\n\n\n\nLet’s first take a glimpse of our data set to become more familiar.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHow many rows and columns do we have in our dataset?\nAnswer: \n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThere are 5 columns and 150 rows in the iris dataset.\n\n\n\n\n\n\nFirst, let’s explore the variable Petal.Length. Add the following correct geom to make side-by-side boxplots of Petal.Length for each Species.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\nadd geom_boxplot() to the following code above to create side-by-side boxplots of Petal.Length for each Species\n\n\n\nThe code below takes your existing code, and colors each boxplot by Species using fill =. Change the fill to color. What happens? Why?\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAnswer: \n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nfill = fills in or changes the entire boxplot with color. color = changes the outline of your specific geom. The exception to this rule is the default shape for geom_point, where the default shape used for a scatterplot is a solid circle that will be filled in regardless if color or fill is used.\n\n\n\n\n\n\nYou can layer more than one geom on your plot. Add an additional layer to your code to create the following plot seen below.\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\nA + sign needs to go after geom_boxplot to signify an additional layer of the ggplot. We can use geom_point() to recreate the plot above.\n\n\n\nNow, instead of using geom_point, use geom_jitter. How does the plot change? What is the difference between geom_point and geom_jitter?\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe points are now more spread out on each of the three boxplots. geom_jitter jitters our observations adding a small amount of random noise to data. It is used to spread out points that would otherwise overlap.\n\n\n\n\n\n\nAny professional plot must have informative titles and labels. This can be accomplished using the labs function in R. Please add the following text to the plot:\nTitle: Petal Length for each Species\nY-axis: Petal Length in cm\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\niris |&gt;\n  ggplot(\n    aes(x = Species, y = Petal.Length, fill = Species)) + \n  geom_boxplot() + \n  geom_jitter() + \n  labs(\n  title = \"Petal Length for each Species\",\n  y = \"Petal Length in cm\"\n)\n\n\n\n\n\n\n\n\n\n\n\nWe can use themes to continue to make plots more professional looking. Themes control all non-data aesthetics of our plot (e.g., plot background color). There are many themes in R to choose from. A a lit of themes can be found here .\nExplore the theme reference page and layer the following themes onto your plot:\n– theme_bw\n– theme_light\n– theme_minimal\nDocument what and what does not change.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotes: \n\n\n\n\n\nPick two variables (or more) from the iris dataset and make a visualization to visualize the relationship between the two variables. Along with your code and output, practice describing the relationship between your variables.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotes: \n\n\n\n\n\n\n\n\nExample\n\n\n\n\n\n\niris |&gt;\n  ggplot(\n    aes(x = Petal.Width, y = Petal.Length, color = Species)) + \n  geom_point() +\n  labs(\n  title = \"Petal Length and Width by Species\",\n  y = \"Petal Length in cm\",\n  x = \"Petal Width in cm\"\n) + \n  theme_bw()\n\n\n\n\n\n\n\n\nThe relationship between petal length and width is strong, positive and linear for each of the three species in the iris data set. It appears that the species virginica has the largest petals while setosa has the smallest."
  },
  {
    "objectID": "exercises/iris-data-visualization.html#packages",
    "href": "exercises/iris-data-visualization.html#packages",
    "title": "Visualizing Iris Flowers",
    "section": "",
    "text": "We’ll use: tidyverse for majority of the activity and scales for pretty plot labels. These are ready to use for you in this activity!\n\nlibrary(tidyverse)\nlibrary(scales)\n\n\n\n\nAttaching package: 'gridExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine"
  },
  {
    "objectID": "exercises/iris-data-visualization.html#the-data",
    "href": "exercises/iris-data-visualization.html#the-data",
    "title": "Visualizing Iris Flowers",
    "section": "",
    "text": "We will use the iris dataset for this activity. This dataset is pre-packaged for you to use in R (Fisher 1936).\nThe iris dataset contains four features (length and width of sepals and petals) of three species of Iris (Iris setosa, Iris virginica and Iris versicolor). A sepal is the outer parts of the flower (often green and leaf-like) that enclose a developing bud. The petal are parts of a flower that are the pollen producing part of the flower that are often conspicuously colored. The data were collected in 1936 at the Gaspé Peninsula, in Canada. The difference between sepals and petals can be seen below.\n\n\n\n\n\nLet’s first take a glimpse of our data set to become more familiar.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHow many rows and columns do we have in our dataset?\nAnswer: \n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThere are 5 columns and 150 rows in the iris dataset."
  },
  {
    "objectID": "exercises/iris-data-visualization.html#visualizing-data-with-ggplot2",
    "href": "exercises/iris-data-visualization.html#visualizing-data-with-ggplot2",
    "title": "Visualizing Iris Flowers",
    "section": "",
    "text": "First, let’s explore the variable Petal.Length. Add the following correct geom to make side-by-side boxplots of Petal.Length for each Species.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\nadd geom_boxplot() to the following code above to create side-by-side boxplots of Petal.Length for each Species\n\n\n\nThe code below takes your existing code, and colors each boxplot by Species using fill =. Change the fill to color. What happens? Why?\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAnswer: \n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nfill = fills in or changes the entire boxplot with color. color = changes the outline of your specific geom. The exception to this rule is the default shape for geom_point, where the default shape used for a scatterplot is a solid circle that will be filled in regardless if color or fill is used."
  },
  {
    "objectID": "exercises/iris-data-visualization.html#layering-geoms",
    "href": "exercises/iris-data-visualization.html#layering-geoms",
    "title": "Visualizing Iris Flowers",
    "section": "",
    "text": "You can layer more than one geom on your plot. Add an additional layer to your code to create the following plot seen below.\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\nA + sign needs to go after geom_boxplot to signify an additional layer of the ggplot. We can use geom_point() to recreate the plot above.\n\n\n\nNow, instead of using geom_point, use geom_jitter. How does the plot change? What is the difference between geom_point and geom_jitter?\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe points are now more spread out on each of the three boxplots. geom_jitter jitters our observations adding a small amount of random noise to data. It is used to spread out points that would otherwise overlap."
  },
  {
    "objectID": "exercises/iris-data-visualization.html#labels-themes",
    "href": "exercises/iris-data-visualization.html#labels-themes",
    "title": "Visualizing Iris Flowers",
    "section": "",
    "text": "Any professional plot must have informative titles and labels. This can be accomplished using the labs function in R. Please add the following text to the plot:\nTitle: Petal Length for each Species\nY-axis: Petal Length in cm\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\niris |&gt;\n  ggplot(\n    aes(x = Species, y = Petal.Length, fill = Species)) + \n  geom_boxplot() + \n  geom_jitter() + \n  labs(\n  title = \"Petal Length for each Species\",\n  y = \"Petal Length in cm\"\n)\n\n\n\n\n\n\n\n\n\n\n\nWe can use themes to continue to make plots more professional looking. Themes control all non-data aesthetics of our plot (e.g., plot background color). There are many themes in R to choose from. A a lit of themes can be found here .\nExplore the theme reference page and layer the following themes onto your plot:\n– theme_bw\n– theme_light\n– theme_minimal\nDocument what and what does not change.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotes:"
  },
  {
    "objectID": "exercises/iris-data-visualization.html#visualizing-other-variables",
    "href": "exercises/iris-data-visualization.html#visualizing-other-variables",
    "title": "Visualizing Iris Flowers",
    "section": "",
    "text": "Pick two variables (or more) from the iris dataset and make a visualization to visualize the relationship between the two variables. Along with your code and output, practice describing the relationship between your variables.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotes: \n\n\n\n\n\n\n\n\nExample\n\n\n\n\n\n\niris |&gt;\n  ggplot(\n    aes(x = Petal.Width, y = Petal.Length, color = Species)) + \n  geom_point() +\n  labs(\n  title = \"Petal Length and Width by Species\",\n  y = \"Petal Length in cm\",\n  x = \"Petal Width in cm\"\n) + \n  theme_bw()\n\n\n\n\n\n\n\n\nThe relationship between petal length and width is strong, positive and linear for each of the three species in the iris data set. It appears that the species virginica has the largest petals while setosa has the smallest."
  },
  {
    "objectID": "exercises/webR-intro.html",
    "href": "exercises/webR-intro.html",
    "title": "Introduction to WebR",
    "section": "",
    "text": "WebR is a version of the statistical language R compiled for the browser. We have created WebR documents for each programming activity you will interact with for each module.\nActivities are meant to provide an interactive environment for students to implement what they have learned from the videos. This activity allows you to write and run R-Code within the html document. Code chunks that allow you to do this look like:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nRecall that anything after the # sign in a code chunk is treated as text, and not code.\nSometimes, we provide code chunks that are not interactive and will have already run for you. These will look like this:\n\n# example r-chunk\n\nThere will be a variety of question types throughout an activity. Question types include the following:\n– Your Turn: These coding questions ask students to explore / edit / manipulate existing to code. These questions are followed with an Expected Solutions box so students can get immediate feedback\n– Demo: These coding questions have the solutions within them and allow the students to run the code and think critically about the output.\nThroughout the activity, you will see open text boxes. These text boxes will either be labeled Answer or Notes.\n  - Answer: This prompts you to answer a short-answer question. These questions are followed by \n  a `Solutions` tab to reveal the answer.\n  \n  - Notes: This provides a space to take notes to be referenced later. These are often gives \n  after `Demo` questions. \n  \n\n\n\n\n\n\nSaving Your Work\n\n\n\nYour work does not automatically save.\nFor most browsers, the most efficient way to save your work is by using the Print feature. This may be useful if you want to come back and reference your work after it’s completed.\n– Right click anywhere on this html page\n– Select Print...\n– Under the Destination tab, click Save as PDF\n– Select a file on your computer you wish to save your work.\n\n\n\n\nWe’ll use the tidyverse package in every programming activity. The tidyverse is an R package that has many different data science functions to help us better explore and visualize data. We need to “unpack” the package to use the functions inside. We do this with the following code.\n\nlibrary(tidyverse)\n\nYou will see code for packages at the start of every programming activity.\n\n\n\n\n\nYour Turn: First, let’s get started by using R as a calculator. Below, perform the following calculations by typing the equation into the code chunk and clicking Run Code\n– 2 + 2\n– 3 * 5\n– 10 / 2\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nR is a functional language. Functions act as the name of algorithmic details that are used to accomplish a specific task. For example, if I wanted to round the value 3.23, I could accomplish this with the function round in R. The number 3.23 is an argument to the function round. An argument is an input to a function. A value is produced as a result.\nex.\n\nround(3.22)\n\n[1] 3\n\n\nOften times, functions can take on multiple arguments. Previously, we saw round(3.225) produce the value 3. This is because round defaults to producing a value to the nearest whole number. However, we can override the default inputing a second argument. You are not expected to memorize all arguments of every function you learn during this course. If you have R locally installed, you can run a ? in front of the function name in your console to pull up a help file that will define the arguments of a function for you. These help files can also be found on line. For example, here is the help file for round here\nFrom the documentation, you can see the second argument of the function round is digits.\nYour Turn Change the 0 to another number, and take note on how this changes the corresponding output when you click Run Code.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAs you may notice, the first argument and second argument are separated by a ,. This is consistent across all functions in R.\n\n\n\n\n\n\nTip\n\n\n\nIf you provide the arguments in the exact same order as they are defined in the help file, you do not have to include the name of the argument\n\n\n\nround(3.225, 1)\n\n[1] 3.2\n\n\n\n\n\nFor the remainder of this activity, we are going to practice using fucntions on the mtcars data set. These data were extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models).\nDemo Run the following code to see the first six lines of data below\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWhat is the name of the function used in the above code? What is the input?\nAnswer: \n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe function is named head\nThe argument is the dataset mtcars\n\n\n\nWe can also get a better sense of the data we are working with by using the glimpe function. This allows us to see how many rows and columns we have in our data set, the type of data we are working with, and the data inputs. For now, we just want to practice writing the function to initially explore these data.\nYour Turn Use the glimpse function on the mtcars data set below.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nHow many rows are in the mtcars data set? How many columns?\nAnswer: \n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThere are 32 rows in the mtcars data set\nThere are 11 columns in the mtcars data set\n\n\n\n\n\n\nYour Turn: There are many other functions we can use on data to explore it prior to making data visualizations. You are encouraged to explore the help files of the following:\n– tail\n– slice\nAfter doing so, try to answer answer the following questions!\nUse tail to produce the last six lines of the mtcars data set.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ntail(mtcars)\n\n                mpg cyl  disp  hp drat    wt qsec vs am gear carb\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.7  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2\nFord Pantera L 15.8   8 351.0 264 4.22 3.170 14.5  0  1    5    4\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.5  0  1    5    6\nMaserati Bora  15.0   8 301.0 335 3.54 3.570 14.6  0  1    5    8\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.6  1  1    4    2\n\n\n\n\n\nNow, use slice to produce the first three lines of the mtcars data set.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nslice(mtcars, 1:3)\n\n               mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4     21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710    22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n\n\n\n\n\nIn the subsequent lessons, we are going to learn how to manipulate, work with, and plot data using a variety of functions in R."
  },
  {
    "objectID": "exercises/webR-intro.html#introduction",
    "href": "exercises/webR-intro.html#introduction",
    "title": "Introduction to WebR",
    "section": "",
    "text": "Your Turn: First, let’s get started by using R as a calculator. Below, perform the following calculations by typing the equation into the code chunk and clicking Run Code\n– 2 + 2\n– 3 * 5\n– 10 / 2\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nR is a functional language. Functions act as the name of algorithmic details that are used to accomplish a specific task. For example, if I wanted to round the value 3.23, I could accomplish this with the function round in R. The number 3.23 is an argument to the function round. An argument is an input to a function. A value is produced as a result.\nex.\n\nround(3.22)\n\n[1] 3\n\n\nOften times, functions can take on multiple arguments. Previously, we saw round(3.225) produce the value 3. This is because round defaults to producing a value to the nearest whole number. However, we can override the default inputing a second argument. You are not expected to memorize all arguments of every function you learn during this course. If you have R locally installed, you can run a ? in front of the function name in your console to pull up a help file that will define the arguments of a function for you. These help files can also be found on line. For example, here is the help file for round here\nFrom the documentation, you can see the second argument of the function round is digits.\nYour Turn Change the 0 to another number, and take note on how this changes the corresponding output when you click Run Code.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAs you may notice, the first argument and second argument are separated by a ,. This is consistent across all functions in R.\n\n\n\n\n\n\nTip\n\n\n\nIf you provide the arguments in the exact same order as they are defined in the help file, you do not have to include the name of the argument\n\n\n\nround(3.225, 1)\n\n[1] 3.2\n\n\n\n\n\nFor the remainder of this activity, we are going to practice using fucntions on the mtcars data set. These data were extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models).\nDemo Run the following code to see the first six lines of data below\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWhat is the name of the function used in the above code? What is the input?\nAnswer: \n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe function is named head\nThe argument is the dataset mtcars\n\n\n\nWe can also get a better sense of the data we are working with by using the glimpe function. This allows us to see how many rows and columns we have in our data set, the type of data we are working with, and the data inputs. For now, we just want to practice writing the function to initially explore these data.\nYour Turn Use the glimpse function on the mtcars data set below.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nHow many rows are in the mtcars data set? How many columns?\nAnswer: \n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThere are 32 rows in the mtcars data set\nThere are 11 columns in the mtcars data set\n\n\n\n\n\n\nYour Turn: There are many other functions we can use on data to explore it prior to making data visualizations. You are encouraged to explore the help files of the following:\n– tail\n– slice\nAfter doing so, try to answer answer the following questions!\nUse tail to produce the last six lines of the mtcars data set.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ntail(mtcars)\n\n                mpg cyl  disp  hp drat    wt qsec vs am gear carb\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.7  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2\nFord Pantera L 15.8   8 351.0 264 4.22 3.170 14.5  0  1    5    4\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.5  0  1    5    6\nMaserati Bora  15.0   8 301.0 335 3.54 3.570 14.6  0  1    5    8\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.6  1  1    4    2\n\n\n\n\n\nNow, use slice to produce the first three lines of the mtcars data set.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nslice(mtcars, 1:3)\n\n               mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4     21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710    22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n\n\n\n\n\nIn the subsequent lessons, we are going to learn how to manipulate, work with, and plot data using a variety of functions in R."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data visualization and transformation",
    "section": "",
    "text": "Title\n\n\n\n\n\n\nVisualising data with ggplot2\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#slides",
    "href": "index.html#slides",
    "title": "Data visualization and transformation",
    "section": "",
    "text": "Title\n\n\n\n\n\n\nVisualising data with ggplot2\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#code-alongs",
    "href": "index.html#code-alongs",
    "title": "Data visualization and transformation",
    "section": "Code alongs",
    "text": "Code alongs\n\n\n\n\n\nTitle\n\n\n\n\n\n\nVisualizing Starwars characters\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#exercises",
    "href": "index.html#exercises",
    "title": "Data visualization and transformation",
    "section": "Exercises",
    "text": "Exercises\n\n\n\n\n\nTitle\n\n\nSubtitle\n\n\n\n\n\n\nIntroduction to WebR\n\n\nModule 1 - Course 1 - Lesson 1.2\n\n\n\n\nBechdel + Data Visualization\n\n\nModule 1 - Ex 1\n\n\n\n\nMario Games + Data Visualization\n\n\nModule 1 - Ex 1\n\n\n\n\nBechdel + Data Visualization\n\n\nModule 1 - Ex 2\n\n\n\n\nVisualizing Iris Flowers\n\n\nModule 2 - Ex 1\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "exercises/mario-data-visualization.html",
    "href": "exercises/mario-data-visualization.html",
    "title": "Mario Games + Data Visualization",
    "section": "",
    "text": "This activity is meant to provide an interactive environment for students to implement what they have learned from the videos. This activity allows you to write and run R-Code within the html document. Code chunks that allow you to do this look like:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSometimes, we provide code chunks that are not interactive, and will look like:\n\n# example r-chunk\n\nThere will be a variety of question types throughout the document. Question types include the following:\n– Your Turn: These coding questions ask students to explore / edit / manipulate existing to code. These questions are followed with an Expected Solutions box so students can get immediate feedback\n– Demo: These coding questions have the solutions within them and allow the students to run the code and think critically about the output.\nThroughout the activity, you will see open text boxes. These text boxes will either be labeled Answer or Notes.\n  - Answer: This prompts you to answer a short-answer question. These questions are followed by \n  a `Solutions` tab to reveal the answer.\n  \n  - Notes: This provides a space to take notes to be referenced later. These are often gives \n  after `Demo` questions. \n\n\n\n\n\n\nSaving Your Work\n\n\n\nYour work does not automatically save.\nFor most browsers, the most efficient way to save your work is by using the Print feature. This may be useful if you want to come back and reference your work after it’s completed.\n– Right click anywhere on this html page\n– Select Print...\n– Under the Destination tab, click Save as PDF\n– Select a file on your computer you wish to save your work.\n\n\n\n\nPlease run the following code by clicking the green arrow just above the code chunk. When reading in the data, nothing will appear after you click the button. However, clicking the arrow ensures that your data are read in and can be used for the following activity.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn this mini analysis we work with the data from the openintro package in R. These data are auction data from Ebay for the game Mario Kart for the Nintendo Wii, collected in October 2009. A key to these data can be found below:\n\n\n\n\n\n\n\nvariable name\ndescription\n\n\nid\nAuction ID assigned by Ebay.\n\n\nduration\nAuction length, in days\n\n\nn_bids\nNumber of bids\n\n\ncond\nGame condition, either new or used\n\n\nstart_pr\nStart price of the auction\n\n\nship_pr\nShipping price\n\n\ntotal_pr\nTotal price, which equals the auction price plus the shipping price\n\n\nship_sp\nShipping speed or method\n\n\nseller_rate\nThe seller’s rating on Ebay. This is the number of positive ratings minus the number of negative ratings for the seller\n\n\nstock_photo\nWhether the auction feature photo was a stock photo or not, either yes or no\n\n\nwheels\nNumber of Wii wheels included in the auction. These are steering wheel attachments to make it seem as though you are actually driving in the game.\n\n\ntitle\nThe title of the auctions\n\n\n\n\n\nWe’ll use: tidyverse for majority of the analysis and scales for pretty plot labels later on. These are ready to use for you in this activity!\n\nlibrary(tidyverse)\nlibrary(scales)\n\n\n\n\nYour Turn: We can use the glimpse function to get an overview (or “glimpse”) of the data. Write the following code below to accomplish this task.\nWith your output, confirm that:\n– There are 143 rows\n– There are 12 variables (columns) in the dataset\n\n\n\n\n\n\nWarning\n\n\n\nIf you receive the error Error: object ‘mario’ not found, go back and read in your data above.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDemo: We can use slice to look at rows of our data. Run the following code. Change the 5 to another number to print that many rows!\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotes: \n\n\nWhat does each observation (row) in the data set represent?\nAnswer: \n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nEach observation represents a mario game.\n\n\n\n\n\n\n\nThe variables we’ll focus on are the following:\n\nn_bids: number of bids throughout the auction\ntotal_pr: total price of game sold plus shipping in usd\nseller_rate: The seller’s rating on Ebay\ncond: Binary variable representing the condition of the video game\n\n\n\n\nDemo: ggplot2 is the package and ggplot() is the function in this package that is used to create a plot. Interact with the code below by either running the code given, or adding code to achieve the expected solution when asked within the code chunk!\n\nggplot() creates the initial base coordinate system, and we will add layers to that base. We first specify the data set we will use with data = mario, and run the following to create our base.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThe mapping argument is paired with an aesthetic (aes()), which tells us how the variables in our data set should be mapped to the visual properties of the graph.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAs we previously mentioned, we often omit the names of the first two arguments in R functions. So you’ll often see this written as:\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote that the result is exactly the same.\nYour Turn: The geom_xx function specifies the type of plot we want to use to represent the data. In the code below, we want to use geom_point, which creates a plot where each observation is represented by a point.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFOR MINE Should we omit some data so people can see that R omits a warning and a plot? And then talk about it like below:\nNote that this results in a warning as well.\nThis warning represents the number of observations that were removed because there were missing data!\n\n\n\n\n\nYour Turn: The following code changes the color of all points to coral. Explore different colors by changing “coral” to different colors!\n\n\n\n\n\n\nTip\n\n\n\nSee http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf for many color options you can use by name in R or use the hex code for a color of your choice.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nYour Turn: Add labels for the title and x and y axes using labs. Do this by modifying the existing code below.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\nggplot(mario, \n       aes(x = n_bids, y = total_pr))+\n  geom_point(color = \"deepskyblue3\") + \n  labs(\n    x = \"Number of bids\", \n    y = \"Total price ($)\", \n    title = \"Total bids vs price\"\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour Turn: An aesthetic is a visual property of one of the objects in your plot. Commonly used aesthetic options are:\n\ncolor\nfill\nshape\nsize\nalpha (transparency)\n\nModify the plot below, so the color of the points is based on the variable cond, and make the size of your points based on seller_rate.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\nggplot(mario, \n       aes(x = n_bids, y = total_pr,\n           color = cond, size = seller_rate)) +\n  geom_point() + \n  labs(\n    x = \"Number of bids\", \n    y = \"Total price ($)\", \n    title = \"Total bids vs price by condition and seller rating\"\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour Turn: Expand on your plot from the previous step to make the transparency (alpha) of the points 0.5.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nYour Turn: Expand on your plot from the previous step by using facet_wrap to display the association between budget and gross for different values of stock_photo.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\nggplot(mario, \n  aes(x = n_bids, y = total_pr,\n    color = cond, size = seller_rate)) +\n  geom_point(alpha = 0.5) + \n  facet_wrap(~ stock_photo) +\n  labs(\n    x = \"Number of bids\", \n    y = \"Total price ($)\", \n    title = \"Total bids vs price by condition and seller rating\"\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDemo: Below is a demonstration on how to improve your plot from the previous step by making the y scale more legible.\n\n\n\n\n\n\nTip\n\n\n\nThis is done through the use of the scales package, specifically the scale_x_continuous() and scale_y_continuous() functions. Because we want to change the y-axis label, let’s demo the scale_y_continuous() function below.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotes: \n\n\n\n\n\nYour Turn: Expand on your plot from the previous step by using facet_grid to display the association between budget and gross for different combinations of stock_photo and cond. Comment on whether you notice any additional patters that were harder to see before.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotes:"
  },
  {
    "objectID": "exercises/mario-data-visualization.html#getting-started",
    "href": "exercises/mario-data-visualization.html#getting-started",
    "title": "Mario Games + Data Visualization",
    "section": "",
    "text": "Please run the following code by clicking the green arrow just above the code chunk. When reading in the data, nothing will appear after you click the button. However, clicking the arrow ensures that your data are read in and can be used for the following activity.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn this mini analysis we work with the data from the openintro package in R. These data are auction data from Ebay for the game Mario Kart for the Nintendo Wii, collected in October 2009. A key to these data can be found below:\n\n\n\n\n\n\n\nvariable name\ndescription\n\n\nid\nAuction ID assigned by Ebay.\n\n\nduration\nAuction length, in days\n\n\nn_bids\nNumber of bids\n\n\ncond\nGame condition, either new or used\n\n\nstart_pr\nStart price of the auction\n\n\nship_pr\nShipping price\n\n\ntotal_pr\nTotal price, which equals the auction price plus the shipping price\n\n\nship_sp\nShipping speed or method\n\n\nseller_rate\nThe seller’s rating on Ebay. This is the number of positive ratings minus the number of negative ratings for the seller\n\n\nstock_photo\nWhether the auction feature photo was a stock photo or not, either yes or no\n\n\nwheels\nNumber of Wii wheels included in the auction. These are steering wheel attachments to make it seem as though you are actually driving in the game.\n\n\ntitle\nThe title of the auctions\n\n\n\n\n\nWe’ll use: tidyverse for majority of the analysis and scales for pretty plot labels later on. These are ready to use for you in this activity!\n\nlibrary(tidyverse)\nlibrary(scales)\n\n\n\n\nYour Turn: We can use the glimpse function to get an overview (or “glimpse”) of the data. Write the following code below to accomplish this task.\nWith your output, confirm that:\n– There are 143 rows\n– There are 12 variables (columns) in the dataset\n\n\n\n\n\n\nWarning\n\n\n\nIf you receive the error Error: object ‘mario’ not found, go back and read in your data above.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDemo: We can use slice to look at rows of our data. Run the following code. Change the 5 to another number to print that many rows!\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotes: \n\n\nWhat does each observation (row) in the data set represent?\nAnswer: \n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nEach observation represents a mario game."
  },
  {
    "objectID": "exercises/mario-data-visualization.html#variables-of-interest-update",
    "href": "exercises/mario-data-visualization.html#variables-of-interest-update",
    "title": "Mario Games + Data Visualization",
    "section": "",
    "text": "The variables we’ll focus on are the following:\n\nn_bids: number of bids throughout the auction\ntotal_pr: total price of game sold plus shipping in usd\nseller_rate: The seller’s rating on Ebay\ncond: Binary variable representing the condition of the video game"
  },
  {
    "objectID": "exercises/mario-data-visualization.html#visualizing-data-with-ggplot2",
    "href": "exercises/mario-data-visualization.html#visualizing-data-with-ggplot2",
    "title": "Mario Games + Data Visualization",
    "section": "",
    "text": "Demo: ggplot2 is the package and ggplot() is the function in this package that is used to create a plot. Interact with the code below by either running the code given, or adding code to achieve the expected solution when asked within the code chunk!\n\nggplot() creates the initial base coordinate system, and we will add layers to that base. We first specify the data set we will use with data = mario, and run the following to create our base.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThe mapping argument is paired with an aesthetic (aes()), which tells us how the variables in our data set should be mapped to the visual properties of the graph.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAs we previously mentioned, we often omit the names of the first two arguments in R functions. So you’ll often see this written as:\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote that the result is exactly the same.\nYour Turn: The geom_xx function specifies the type of plot we want to use to represent the data. In the code below, we want to use geom_point, which creates a plot where each observation is represented by a point.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFOR MINE Should we omit some data so people can see that R omits a warning and a plot? And then talk about it like below:\nNote that this results in a warning as well.\nThis warning represents the number of observations that were removed because there were missing data!"
  },
  {
    "objectID": "exercises/mario-data-visualization.html#number-of-bids-vs.-total-price",
    "href": "exercises/mario-data-visualization.html#number-of-bids-vs.-total-price",
    "title": "Mario Games + Data Visualization",
    "section": "",
    "text": "Your Turn: The following code changes the color of all points to coral. Explore different colors by changing “coral” to different colors!\n\n\n\n\n\n\nTip\n\n\n\nSee http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf for many color options you can use by name in R or use the hex code for a color of your choice.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nYour Turn: Add labels for the title and x and y axes using labs. Do this by modifying the existing code below.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\nggplot(mario, \n       aes(x = n_bids, y = total_pr))+\n  geom_point(color = \"deepskyblue3\") + \n  labs(\n    x = \"Number of bids\", \n    y = \"Total price ($)\", \n    title = \"Total bids vs price\"\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour Turn: An aesthetic is a visual property of one of the objects in your plot. Commonly used aesthetic options are:\n\ncolor\nfill\nshape\nsize\nalpha (transparency)\n\nModify the plot below, so the color of the points is based on the variable cond, and make the size of your points based on seller_rate.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\nggplot(mario, \n       aes(x = n_bids, y = total_pr,\n           color = cond, size = seller_rate)) +\n  geom_point() + \n  labs(\n    x = \"Number of bids\", \n    y = \"Total price ($)\", \n    title = \"Total bids vs price by condition and seller rating\"\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour Turn: Expand on your plot from the previous step to make the transparency (alpha) of the points 0.5.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nYour Turn: Expand on your plot from the previous step by using facet_wrap to display the association between budget and gross for different values of stock_photo.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\nggplot(mario, \n  aes(x = n_bids, y = total_pr,\n    color = cond, size = seller_rate)) +\n  geom_point(alpha = 0.5) + \n  facet_wrap(~ stock_photo) +\n  labs(\n    x = \"Number of bids\", \n    y = \"Total price ($)\", \n    title = \"Total bids vs price by condition and seller rating\"\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDemo: Below is a demonstration on how to improve your plot from the previous step by making the y scale more legible.\n\n\n\n\n\n\nTip\n\n\n\nThis is done through the use of the scales package, specifically the scale_x_continuous() and scale_y_continuous() functions. Because we want to change the y-axis label, let’s demo the scale_y_continuous() function below.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotes: \n\n\n\n\n\nYour Turn: Expand on your plot from the previous step by using facet_grid to display the association between budget and gross for different combinations of stock_photo and cond. Comment on whether you notice any additional patters that were harder to see before.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotes:"
  },
  {
    "objectID": "exercises/exercise-1.html",
    "href": "exercises/exercise-1.html",
    "title": "Bechdel + Data Visualization",
    "section": "",
    "text": "This activity is meant to provide an interactive environment for students to implement what they have learned from the videos. This activity allows you to write and run R-Code within the html document. Code chunks that allow you to do this look like:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSometimes, we provide code chunks that are not interactive, and will look like:\n\n# example r-chunk\n\nThere will be a variety of question types throughout the document. Question types include the following:\n– Your Turn: These coding questions ask students to explore / edit / manipulate existing to code. These questions are followed with an Expected Solutions box so students can get immediate feedback\n– Demo: These coding questions have the solutions within them and allow the students to run the code and think critically about the output.\nThroughout the activity, you will see open text boxes. These text boxes will either be labeled Answer or Notes.\n  - Answer: This prompts you to answer a short-answer question. These questions are followed by \n  a `Solutions` tab to reveal the answer.\n  \n  - Notes: This provides a space to take notes to be referenced later. These are often gives \n  after `Demo` questions. \n\n\n\n\n\n\nSaving Your Work\n\n\n\nYour work does not automatically save.\nFor most browsers, the most efficient way to save your work is by using the Print feature. This may be useful if you want to come back and reference your work after it’s completed.\n– Right click anywhere on this html page\n– Select Print...\n– Under the Destination tab, click Save as PDF\n– Select a file on your computer you wish to save your work.\n\n\n\n\nPlease run the following code by clicking the green arrow just above the code chunk. When reading in the data, nothing will appear after you click the button. However, clicking the arrow ensures that your data are read in and can be used for the following activity.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn this mini analysis we work with the data used in the FiveThirtyEight story titled “The Dollar-And-Cents Case Against Hollywood’s Exclusion of Women”.\nThis analysis is about the Bechdel test, a measure of the representation of women in fiction.\n\n\nWe’ll use: tidyverse for majority of the analysis and scales for pretty plot labels later on. These are ready to use for you in this activity!\n\nlibrary(tidyverse)\nlibrary(scales)\n\nFOR MINE Do we need this note below? I modified it from the original AE, but it may not feel necessary for Coursera.\n\n\n\n\n\n\nNote\n\n\n\nThis a modified version of the bechdel dataset. It’s been modified to include some new variables derived from existing variables as well as to limit the scope of the data to movies released between 1990 and 2013. A link to the original dataset can be found here\n\n\n\n\n\nYour Turn: We can use the glimpse function to get an overview (or “glimpse”) of the data. Write the following code below to accomplish this task.\nWith your output, confirm that:\n– There are 1615 rows\n– There are 7 variables (columns) in the dataset\n\n\n\n\n\n\nWarning\n\n\n\nIf you receive the error Error: object ‘bechdel’ not found, go back and read in your data above.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDemo: We can use slice to look at rows of our data. Run the following code. Change the 5 to another number to print that many rows!\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotes: \n\n\nWhat does each observation (row) in the data set represent?\nAnswer: \n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nEach observation represents a movie.\n\n\n\n\n\n\n\nThe variables we’ll focus on are the following:\n\nbudget_2013: Budget in 2013 inflation adjusted dollars.\ngross_2013: Gross (US and international combined) in 2013 inflation adjusted dollars.\nroi: Return on investment, calculated as the ratio of the gross to budget.\nclean_test: Bechdel test result:\n\nok = passes test\ndubious\nmen = women only talk about men\nnotalk = women don’t talk to each other\nnowomen = fewer than two women\n\nbinary: Bechdel Test PASS vs FAIL binary\n\nWe will also use the year of release in data prep and title of movie to take a deeper look at some outliers.\nThere are a few other variables in the dataset, but we won’t be using them in this analysis.\n\n\n\nDemo: ggplot2 is the package and ggplot() is the function in this package that is used to create a plot. Interact with the code below by either running the code given, or adding code to achieve the expected solution when asked within the code chunk!\n\nggplot() creates the initial base coordinate system, and we will add layers to that base. We first specify the data set we will use with data = bechdel, and run the following to create our base.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThe mapping argument is paired with an aesthetic (aes()), which tells us how the variables in our data set should be mapped to the visual properties of the graph.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAs we previously mentioned, we often omit the names of the first two arguments in R functions. So you’ll often see this written as:\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote that the result is exactly the same.\nYour Turn: The geom_xx function specifies the type of plot we want to use to represent the data. In the code below, we want to use geom_point, which creates a plot where each observation is represented by a point.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\n\nWarning: Removed 15 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\nNote that this results in a warning as well.\nThis warning represents the number of observations that were removed because there were missing data!\n\n\n\n\n\nYour Turn: The following code changes the color of all points to coral. Explore different colors by changing “coral” to different colors!\n\n\n\n\n\n\nTip\n\n\n\nSee http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf for many color options you can use by name in R or use the hex code for a color of your choice.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nYour Turn: Add labels for the title and x and y axes using labs. Do this by modifying the existing code below.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\nggplot(bechdel, \n       aes(x = budget_2013, y = gross_2013))+\n  geom_point(color = \"deepskyblue3\") + \n  labs(\n    x = \"Budget (in 2013 $)\", \n    y = \"Gross revenue (in 2013 $)\", \n    title = \"Gross revenue vs. budget\"\n    )\n\nWarning: Removed 15 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour Turn: An aesthetic is a visual property of one of the objects in your plot. Commonly used aesthetic options are:\n\ncolor\nfill\nshape\nsize\nalpha (transparency)\n\nModify the plot below, so the color of the points is based on the variable binary, and make the size of your points based on roi.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\nggplot(bechdel, \n       aes(x = budget_2013, y = gross_2013,\n           color = binary, size = roi)) +\n  geom_point() + \n  labs(\n    x = \"Budget (in 2013 $)\", \n    y = \"Gross revenue (in 2013 $)\", \n    title = \"Gross revenue vs. budget, by Bechdel test result\"\n    )\n\nWarning: Removed 15 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour Turn: Expand on your plot from the previous step to make the transparency (alpha) of the points 0.5.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nYour Turn: Expand on your plot from the previous step by using facet_wrap to display the association between budget and gross for different values of clean_test.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\nggplot(bechdel, \n  aes(x = budget_2013, y = gross_2013,\n    color = binary, size = roi)) +\n  geom_point(alpha = 0.5) + \n  facet_wrap(~ clean_test) +\n  labs(\n    x = \"Budget (in 2013 $)\", \n    y = \"Gross revenue (in 2013 $)\", \n    title = \"Gross revenue vs. budget, by Bechdel test result\"\n    )\n\nWarning: Removed 15 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDemo: Below is a demonstration on how to improve your plot from the previous step by making the x and y scales more legible.\n\n\n\n\n\n\nTip\n\n\n\nThis is done through the use of the scales package, specifically the scale_x_continuous() and scale_y_continuous() functions.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotes: \n\n\n\n\n\nYour Turn: Expand on your plot from the previous step by using facet_grid to display the association between budget and gross for different combinations of clean_test and binary. Comment on whether this was a useful update.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIs this type of facet useful? Why or why not?\nAnswer: \n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThis was not a useful update as one of the levels of clean_test maps directly to one of the levels of binary."
  },
  {
    "objectID": "exercises/exercise-1.html#getting-started",
    "href": "exercises/exercise-1.html#getting-started",
    "title": "Bechdel + Data Visualization",
    "section": "",
    "text": "Please run the following code by clicking the green arrow just above the code chunk. When reading in the data, nothing will appear after you click the button. However, clicking the arrow ensures that your data are read in and can be used for the following activity.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn this mini analysis we work with the data used in the FiveThirtyEight story titled “The Dollar-And-Cents Case Against Hollywood’s Exclusion of Women”.\nThis analysis is about the Bechdel test, a measure of the representation of women in fiction.\n\n\nWe’ll use: tidyverse for majority of the analysis and scales for pretty plot labels later on. These are ready to use for you in this activity!\n\nlibrary(tidyverse)\nlibrary(scales)\n\nFOR MINE Do we need this note below? I modified it from the original AE, but it may not feel necessary for Coursera.\n\n\n\n\n\n\nNote\n\n\n\nThis a modified version of the bechdel dataset. It’s been modified to include some new variables derived from existing variables as well as to limit the scope of the data to movies released between 1990 and 2013. A link to the original dataset can be found here\n\n\n\n\n\nYour Turn: We can use the glimpse function to get an overview (or “glimpse”) of the data. Write the following code below to accomplish this task.\nWith your output, confirm that:\n– There are 1615 rows\n– There are 7 variables (columns) in the dataset\n\n\n\n\n\n\nWarning\n\n\n\nIf you receive the error Error: object ‘bechdel’ not found, go back and read in your data above.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDemo: We can use slice to look at rows of our data. Run the following code. Change the 5 to another number to print that many rows!\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotes: \n\n\nWhat does each observation (row) in the data set represent?\nAnswer: \n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nEach observation represents a movie."
  },
  {
    "objectID": "exercises/exercise-1.html#variables-of-interest",
    "href": "exercises/exercise-1.html#variables-of-interest",
    "title": "Bechdel + Data Visualization",
    "section": "",
    "text": "The variables we’ll focus on are the following:\n\nbudget_2013: Budget in 2013 inflation adjusted dollars.\ngross_2013: Gross (US and international combined) in 2013 inflation adjusted dollars.\nroi: Return on investment, calculated as the ratio of the gross to budget.\nclean_test: Bechdel test result:\n\nok = passes test\ndubious\nmen = women only talk about men\nnotalk = women don’t talk to each other\nnowomen = fewer than two women\n\nbinary: Bechdel Test PASS vs FAIL binary\n\nWe will also use the year of release in data prep and title of movie to take a deeper look at some outliers.\nThere are a few other variables in the dataset, but we won’t be using them in this analysis."
  },
  {
    "objectID": "exercises/exercise-1.html#visualizing-data-with-ggplot2",
    "href": "exercises/exercise-1.html#visualizing-data-with-ggplot2",
    "title": "Bechdel + Data Visualization",
    "section": "",
    "text": "Demo: ggplot2 is the package and ggplot() is the function in this package that is used to create a plot. Interact with the code below by either running the code given, or adding code to achieve the expected solution when asked within the code chunk!\n\nggplot() creates the initial base coordinate system, and we will add layers to that base. We first specify the data set we will use with data = bechdel, and run the following to create our base.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThe mapping argument is paired with an aesthetic (aes()), which tells us how the variables in our data set should be mapped to the visual properties of the graph.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAs we previously mentioned, we often omit the names of the first two arguments in R functions. So you’ll often see this written as:\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote that the result is exactly the same.\nYour Turn: The geom_xx function specifies the type of plot we want to use to represent the data. In the code below, we want to use geom_point, which creates a plot where each observation is represented by a point.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\n\nWarning: Removed 15 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\nNote that this results in a warning as well.\nThis warning represents the number of observations that were removed because there were missing data!"
  },
  {
    "objectID": "exercises/exercise-1.html#gross-revenue-vs.-budget",
    "href": "exercises/exercise-1.html#gross-revenue-vs.-budget",
    "title": "Bechdel + Data Visualization",
    "section": "",
    "text": "Your Turn: The following code changes the color of all points to coral. Explore different colors by changing “coral” to different colors!\n\n\n\n\n\n\nTip\n\n\n\nSee http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf for many color options you can use by name in R or use the hex code for a color of your choice.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nYour Turn: Add labels for the title and x and y axes using labs. Do this by modifying the existing code below.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\nggplot(bechdel, \n       aes(x = budget_2013, y = gross_2013))+\n  geom_point(color = \"deepskyblue3\") + \n  labs(\n    x = \"Budget (in 2013 $)\", \n    y = \"Gross revenue (in 2013 $)\", \n    title = \"Gross revenue vs. budget\"\n    )\n\nWarning: Removed 15 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour Turn: An aesthetic is a visual property of one of the objects in your plot. Commonly used aesthetic options are:\n\ncolor\nfill\nshape\nsize\nalpha (transparency)\n\nModify the plot below, so the color of the points is based on the variable binary, and make the size of your points based on roi.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\nggplot(bechdel, \n       aes(x = budget_2013, y = gross_2013,\n           color = binary, size = roi)) +\n  geom_point() + \n  labs(\n    x = \"Budget (in 2013 $)\", \n    y = \"Gross revenue (in 2013 $)\", \n    title = \"Gross revenue vs. budget, by Bechdel test result\"\n    )\n\nWarning: Removed 15 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour Turn: Expand on your plot from the previous step to make the transparency (alpha) of the points 0.5.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nYour Turn: Expand on your plot from the previous step by using facet_wrap to display the association between budget and gross for different values of clean_test.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\nggplot(bechdel, \n  aes(x = budget_2013, y = gross_2013,\n    color = binary, size = roi)) +\n  geom_point(alpha = 0.5) + \n  facet_wrap(~ clean_test) +\n  labs(\n    x = \"Budget (in 2013 $)\", \n    y = \"Gross revenue (in 2013 $)\", \n    title = \"Gross revenue vs. budget, by Bechdel test result\"\n    )\n\nWarning: Removed 15 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDemo: Below is a demonstration on how to improve your plot from the previous step by making the x and y scales more legible.\n\n\n\n\n\n\nTip\n\n\n\nThis is done through the use of the scales package, specifically the scale_x_continuous() and scale_y_continuous() functions.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotes: \n\n\n\n\n\nYour Turn: Expand on your plot from the previous step by using facet_grid to display the association between budget and gross for different combinations of clean_test and binary. Comment on whether this was a useful update.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIs this type of facet useful? Why or why not?\nAnswer: \n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThis was not a useful update as one of the levels of clean_test maps directly to one of the levels of binary."
  },
  {
    "objectID": "exercises/bechdel-data-visualization.html",
    "href": "exercises/bechdel-data-visualization.html",
    "title": "Bechdel + Data Visualization",
    "section": "",
    "text": "This activity is meant to provide an interactive environment for students to implement what they have learned from the videos. This activity allows you to write and run R-Code within the html document. Code chunks that allow you to do this look like:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSometimes, we provide code chunks that are not interactive, and will look like:\n\n# example r-chunk\n\nThere will be a variety of question types throughout the document. Question types include the following:\n– Your Turn: These coding questions ask students to explore / edit / manipulate existing to code. These questions are followed with an Expected Solutions box so students can get immediate feedback\n– Demo: These coding questions have the solutions within them and allow the students to run the code and think critically about the output.\nThroughout the activity, you will see open text boxes. These text boxes will either be labeled Answer or Notes.\n  - Answer: This prompts you to answer a short-answer question. These questions are followed by \n  a `Solutions` tab to reveal the answer.\n  \n  - Notes: This provides a space to take notes to be referenced later. These are often gives \n  after `Demo` questions. \n\n\n\n\n\n\nSaving Your Work\n\n\n\nYour work does not automatically save.\nFor most browsers, the most efficient way to save your work is by using the Print feature. This may be useful if you want to come back and reference your work after it’s completed.\n– Right click anywhere on this html page\n– Select Print...\n– Under the Destination tab, click Save as PDF\n– Select a file on your computer you wish to save your work.\n\n\n\n\nPlease run the following code by clicking the green arrow just above the code chunk. When reading in the data, nothing will appear after you click the button. However, clicking the arrow ensures that your data are read in and can be used for the following activity.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn this mini analysis we work with the data used in the FiveThirtyEight story titled “The Dollar-And-Cents Case Against Hollywood’s Exclusion of Women”.\nThis analysis is about the Bechdel test, a measure of the representation of women in fiction.\n\n\nWe’ll use: tidyverse for majority of the analysis and scales for pretty plot labels later on. These are ready to use for you in this activity!\n\nlibrary(tidyverse)\nlibrary(scales)\n\nFOR MINE Do we need this note below? I modified it from the original AE, but it may not feel necessary for Coursera.\n\n\n\n\n\n\nNote\n\n\n\nThis a modified version of the bechdel dataset. It’s been modified to include some new variables derived from existing variables as well as to limit the scope of the data to movies released between 1990 and 2013. A link to the original dataset can be found here\n\n\n\n\n\nYour Turn: We can use the glimpse function to get an overview (or “glimpse”) of the data. Write the following code below to accomplish this task.\nWith your output, confirm that:\n– There are 1615 rows\n– There are 7 variables (columns) in the dataset\n\n\n\n\n\n\nWarning\n\n\n\nIf you receive the error Error: object ‘bechdel’ not found, go back and read in your data above.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDemo: We can use slice to look at rows of our data. Run the following code. Change the 5 to another number to print that many rows!\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotes: \n\n\nWhat does each observation (row) in the data set represent?\nAnswer: \n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nEach observation represents a movie.\n\n\n\n\n\n\n\nThe variables we’ll focus on are the following:\n\nbudget_2013: Budget in 2013 inflation adjusted dollars.\ngross_2013: Gross (US and international combined) in 2013 inflation adjusted dollars.\nroi: Return on investment, calculated as the ratio of the gross to budget.\nclean_test: Bechdel test result:\n\nok = passes test\ndubious\nmen = women only talk about men\nnotalk = women don’t talk to each other\nnowomen = fewer than two women\n\nbinary: Bechdel Test PASS vs FAIL binary\n\nWe will also use the year of release in data prep and title of movie to take a deeper look at some outliers.\nThere are a few other variables in the dataset, but we won’t be using them in this analysis.\n\n\n\nDemo: ggplot2 is the package and ggplot() is the function in this package that is used to create a plot. Interact with the code below by either running the code given, or adding code to achieve the expected solution when asked within the code chunk!\n\nggplot() creates the initial base coordinate system, and we will add layers to that base. We first specify the data set we will use with data = bechdel, and run the following to create our base.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThe mapping argument is paired with an aesthetic (aes()), which tells us how the variables in our data set should be mapped to the visual properties of the graph.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAs we previously mentioned, we often omit the names of the first two arguments in R functions. So you’ll often see this written as:\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote that the result is exactly the same.\nYour Turn: The geom_xx function specifies the type of plot we want to use to represent the data. In the code below, we want to use geom_point, which creates a plot where each observation is represented by a point.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\n\nWarning: Removed 15 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\nNote that this results in a warning as well.\nThis warning represents the number of observations that were removed because there were missing data!\n\n\n\n\n\nYour Turn: The following code changes the color of all points to coral. Explore different colors by changing “coral” to different colors!\n\n\n\n\n\n\nTip\n\n\n\nSee http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf for many color options you can use by name in R or use the hex code for a color of your choice.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nYour Turn: Add labels for the title and x and y axes using labs. Do this by modifying the existing code below.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\nggplot(bechdel, \n       aes(x = budget_2013, y = gross_2013))+\n  geom_point(color = \"deepskyblue3\") + \n  labs(\n    x = \"Budget (in 2013 $)\", \n    y = \"Gross revenue (in 2013 $)\", \n    title = \"Gross revenue vs. budget\"\n    )\n\nWarning: Removed 15 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour Turn: An aesthetic is a visual property of one of the objects in your plot. Commonly used aesthetic options are:\n\ncolor\nfill\nshape\nsize\nalpha (transparency)\n\nModify the plot below, so the color of the points is based on the variable binary, and make the size of your points based on roi.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\nggplot(bechdel, \n       aes(x = budget_2013, y = gross_2013,\n           color = binary, size = roi)) +\n  geom_point() + \n  labs(\n    x = \"Budget (in 2013 $)\", \n    y = \"Gross revenue (in 2013 $)\", \n    title = \"Gross revenue vs. budget, by Bechdel test result\"\n    )\n\nWarning: Removed 15 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour Turn: Expand on your plot from the previous step to make the transparency (alpha) of the points 0.5.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nYour Turn: Expand on your plot from the previous step by using facet_wrap to display the association between budget and gross for different values of clean_test.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\nggplot(bechdel, \n  aes(x = budget_2013, y = gross_2013,\n    color = binary, size = roi)) +\n  geom_point(alpha = 0.5) + \n  facet_wrap(~ clean_test) +\n  labs(\n    x = \"Budget (in 2013 $)\", \n    y = \"Gross revenue (in 2013 $)\", \n    title = \"Gross revenue vs. budget, by Bechdel test result\"\n    )\n\nWarning: Removed 15 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDemo: Below is a demonstration on how to improve your plot from the previous step by making the x and y scales more legible.\n\n\n\n\n\n\nTip\n\n\n\nThis is done through the use of the scales package, specifically the scale_x_continuous() and scale_y_continuous() functions.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotes: \n\n\n\n\n\nYour Turn: Expand on your plot from the previous step by using facet_grid to display the association between budget and gross for different combinations of clean_test and binary. Comment on whether this was a useful update.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIs this type of facet useful? Why or why not?\nAnswer: \n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThis was not a useful update as one of the levels of clean_test maps directly to one of the levels of binary."
  },
  {
    "objectID": "exercises/bechdel-data-visualization.html#getting-started",
    "href": "exercises/bechdel-data-visualization.html#getting-started",
    "title": "Bechdel + Data Visualization",
    "section": "",
    "text": "Please run the following code by clicking the green arrow just above the code chunk. When reading in the data, nothing will appear after you click the button. However, clicking the arrow ensures that your data are read in and can be used for the following activity.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn this mini analysis we work with the data used in the FiveThirtyEight story titled “The Dollar-And-Cents Case Against Hollywood’s Exclusion of Women”.\nThis analysis is about the Bechdel test, a measure of the representation of women in fiction.\n\n\nWe’ll use: tidyverse for majority of the analysis and scales for pretty plot labels later on. These are ready to use for you in this activity!\n\nlibrary(tidyverse)\nlibrary(scales)\n\nFOR MINE Do we need this note below? I modified it from the original AE, but it may not feel necessary for Coursera.\n\n\n\n\n\n\nNote\n\n\n\nThis a modified version of the bechdel dataset. It’s been modified to include some new variables derived from existing variables as well as to limit the scope of the data to movies released between 1990 and 2013. A link to the original dataset can be found here\n\n\n\n\n\nYour Turn: We can use the glimpse function to get an overview (or “glimpse”) of the data. Write the following code below to accomplish this task.\nWith your output, confirm that:\n– There are 1615 rows\n– There are 7 variables (columns) in the dataset\n\n\n\n\n\n\nWarning\n\n\n\nIf you receive the error Error: object ‘bechdel’ not found, go back and read in your data above.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDemo: We can use slice to look at rows of our data. Run the following code. Change the 5 to another number to print that many rows!\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotes: \n\n\nWhat does each observation (row) in the data set represent?\nAnswer: \n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nEach observation represents a movie."
  },
  {
    "objectID": "exercises/bechdel-data-visualization.html#variables-of-interest",
    "href": "exercises/bechdel-data-visualization.html#variables-of-interest",
    "title": "Bechdel + Data Visualization",
    "section": "",
    "text": "The variables we’ll focus on are the following:\n\nbudget_2013: Budget in 2013 inflation adjusted dollars.\ngross_2013: Gross (US and international combined) in 2013 inflation adjusted dollars.\nroi: Return on investment, calculated as the ratio of the gross to budget.\nclean_test: Bechdel test result:\n\nok = passes test\ndubious\nmen = women only talk about men\nnotalk = women don’t talk to each other\nnowomen = fewer than two women\n\nbinary: Bechdel Test PASS vs FAIL binary\n\nWe will also use the year of release in data prep and title of movie to take a deeper look at some outliers.\nThere are a few other variables in the dataset, but we won’t be using them in this analysis."
  },
  {
    "objectID": "exercises/bechdel-data-visualization.html#visualizing-data-with-ggplot2",
    "href": "exercises/bechdel-data-visualization.html#visualizing-data-with-ggplot2",
    "title": "Bechdel + Data Visualization",
    "section": "",
    "text": "Demo: ggplot2 is the package and ggplot() is the function in this package that is used to create a plot. Interact with the code below by either running the code given, or adding code to achieve the expected solution when asked within the code chunk!\n\nggplot() creates the initial base coordinate system, and we will add layers to that base. We first specify the data set we will use with data = bechdel, and run the following to create our base.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThe mapping argument is paired with an aesthetic (aes()), which tells us how the variables in our data set should be mapped to the visual properties of the graph.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAs we previously mentioned, we often omit the names of the first two arguments in R functions. So you’ll often see this written as:\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote that the result is exactly the same.\nYour Turn: The geom_xx function specifies the type of plot we want to use to represent the data. In the code below, we want to use geom_point, which creates a plot where each observation is represented by a point.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\n\nWarning: Removed 15 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\nNote that this results in a warning as well.\nThis warning represents the number of observations that were removed because there were missing data!"
  },
  {
    "objectID": "exercises/bechdel-data-visualization.html#gross-revenue-vs.-budget",
    "href": "exercises/bechdel-data-visualization.html#gross-revenue-vs.-budget",
    "title": "Bechdel + Data Visualization",
    "section": "",
    "text": "Your Turn: The following code changes the color of all points to coral. Explore different colors by changing “coral” to different colors!\n\n\n\n\n\n\nTip\n\n\n\nSee http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf for many color options you can use by name in R or use the hex code for a color of your choice.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nYour Turn: Add labels for the title and x and y axes using labs. Do this by modifying the existing code below.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\nggplot(bechdel, \n       aes(x = budget_2013, y = gross_2013))+\n  geom_point(color = \"deepskyblue3\") + \n  labs(\n    x = \"Budget (in 2013 $)\", \n    y = \"Gross revenue (in 2013 $)\", \n    title = \"Gross revenue vs. budget\"\n    )\n\nWarning: Removed 15 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour Turn: An aesthetic is a visual property of one of the objects in your plot. Commonly used aesthetic options are:\n\ncolor\nfill\nshape\nsize\nalpha (transparency)\n\nModify the plot below, so the color of the points is based on the variable binary, and make the size of your points based on roi.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\nggplot(bechdel, \n       aes(x = budget_2013, y = gross_2013,\n           color = binary, size = roi)) +\n  geom_point() + \n  labs(\n    x = \"Budget (in 2013 $)\", \n    y = \"Gross revenue (in 2013 $)\", \n    title = \"Gross revenue vs. budget, by Bechdel test result\"\n    )\n\nWarning: Removed 15 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour Turn: Expand on your plot from the previous step to make the transparency (alpha) of the points 0.5.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nYour Turn: Expand on your plot from the previous step by using facet_wrap to display the association between budget and gross for different values of clean_test.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpected Result\n\n\n\n\n\n\nggplot(bechdel, \n  aes(x = budget_2013, y = gross_2013,\n    color = binary, size = roi)) +\n  geom_point(alpha = 0.5) + \n  facet_wrap(~ clean_test) +\n  labs(\n    x = \"Budget (in 2013 $)\", \n    y = \"Gross revenue (in 2013 $)\", \n    title = \"Gross revenue vs. budget, by Bechdel test result\"\n    )\n\nWarning: Removed 15 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDemo: Below is a demonstration on how to improve your plot from the previous step by making the x and y scales more legible.\n\n\n\n\n\n\nTip\n\n\n\nThis is done through the use of the scales package, specifically the scale_x_continuous() and scale_y_continuous() functions.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotes: \n\n\n\n\n\nYour Turn: Expand on your plot from the previous step by using facet_grid to display the association between budget and gross for different combinations of clean_test and binary. Comment on whether this was a useful update.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIs this type of facet useful? Why or why not?\nAnswer: \n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThis was not a useful update as one of the levels of clean_test maps directly to one of the levels of binary."
  },
  {
    "objectID": "slides/ggplot2/ggplot2.html#ggplot2-in-tidyverse",
    "href": "slides/ggplot2/ggplot2.html#ggplot2-in-tidyverse",
    "title": "Visualising data with ggplot2",
    "section": "ggplot2 \\(\\in\\) tidyverse",
    "text": "ggplot2 \\(\\in\\) tidyverse\n\n\n\n\n\n\nggplot2 is tidyverse’s data visualization package\nStructure of the code for plots can be summarized as\n\n\n\nggplot(\n  data = [data], \n  mapping = aes(x = [x-variable], y = [y-variable])\n  ) +\n  geom_xxx() +\n  other options"
  },
  {
    "objectID": "slides/ggplot2/ggplot2.html#data-palmer-penguins",
    "href": "slides/ggplot2/ggplot2.html#data-palmer-penguins",
    "title": "Visualising data with ggplot2",
    "section": "Data: Palmer Penguins",
    "text": "Data: Palmer Penguins\nMeasurements for penguin species, island in Palmer Archipelago, size (flipper length, body mass, bill dimensions), and sex.\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\nglimpse(penguins)\n\n\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…"
  },
  {
    "objectID": "slides/ggplot2/ggplot2.html#goal",
    "href": "slides/ggplot2/ggplot2.html#goal",
    "title": "Visualising data with ggplot2",
    "section": "Goal",
    "text": "Goal\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  data = penguins, \n  mapping = aes(x = bill_depth_mm, y = bill_length_mm, color = species)\n  ) +\n  geom_point() +\n  labs(\n    title = \"Bill depth and length\",\n    subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n    x = \"Bill depth (mm)\", y = \"Bill length (mm)\",\n    color = \"Species\",\n    caption = \"Source: Palmer Station LTER / palmerpenguins package\"\n  ) +\n  scale_color_viridis_d()"
  },
  {
    "objectID": "slides/ggplot2/ggplot2.html#section",
    "href": "slides/ggplot2/ggplot2.html#section",
    "title": "Visualising data with ggplot2",
    "section": "",
    "text": "Start with the penguins data frame\n\n\n\n\n\nggplot(data = penguins)"
  },
  {
    "objectID": "slides/ggplot2/ggplot2.html#section-1",
    "href": "slides/ggplot2/ggplot2.html#section-1",
    "title": "Visualising data with ggplot2",
    "section": "",
    "text": "Start with the penguins data frame, map bill depth to the x-axis\n\n\n\n\n\nggplot(\n  data = penguins,\n  mapping = aes(\n    x = bill_depth_mm\n    )\n  )"
  },
  {
    "objectID": "slides/ggplot2/ggplot2.html#section-2",
    "href": "slides/ggplot2/ggplot2.html#section-2",
    "title": "Visualising data with ggplot2",
    "section": "",
    "text": "Start with the penguins data frame, map bill depth to the x-axis and map bill length to the y-axis.\n\n\n\n\n\nggplot(\n  data = penguins,\n  mapping = aes(\n    x = bill_depth_mm,\n    y = bill_length_mm\n    )\n  )"
  },
  {
    "objectID": "slides/ggplot2/ggplot2.html#section-3",
    "href": "slides/ggplot2/ggplot2.html#section-3",
    "title": "Visualising data with ggplot2",
    "section": "",
    "text": "Start with the penguins data frame, map bill depth to the x-axis and map bill length to the y-axis. Represent each observation with a point\n\n\n\n\n\nggplot(\n  data = penguins,\n  mapping = aes(\n    x = bill_depth_mm,\n    y = bill_length_mm\n    )\n  ) +\n  geom_point()"
  },
  {
    "objectID": "slides/ggplot2/ggplot2.html#section-4",
    "href": "slides/ggplot2/ggplot2.html#section-4",
    "title": "Visualising data with ggplot2",
    "section": "",
    "text": "Start with the penguins data frame, map bill depth to the x-axis and map bill length to the y-axis. Represent each observation with a point and map species to the color of each point.\n\n\n\n\n\nggplot(\n  data = penguins,\n  mapping = aes(\n    x = bill_depth_mm,\n    y = bill_length_mm,\n    color = species\n    )\n  ) +\n  geom_point()"
  },
  {
    "objectID": "slides/ggplot2/ggplot2.html#section-5",
    "href": "slides/ggplot2/ggplot2.html#section-5",
    "title": "Visualising data with ggplot2",
    "section": "",
    "text": "Start with the penguins data frame, map bill depth to the x-axis and map bill length to the y-axis. Represent each observation with a point and map species to the color of each point. Title the plot “Bill depth and length”\n\n\n\n\n\nggplot(\n  data = penguins,\n  mapping = aes(x = bill_depth_mm, y = bill_length_mm,color = species)\n  ) +\n  geom_point() +\n  labs(title = \"Bill depth and length\")"
  },
  {
    "objectID": "slides/ggplot2/ggplot2.html#section-6",
    "href": "slides/ggplot2/ggplot2.html#section-6",
    "title": "Visualising data with ggplot2",
    "section": "",
    "text": "Start with the penguins data frame, map bill depth to the x-axis and map bill length to the y-axis. Represent each observation with a point and map species to the color of each point. Title the plot “Bill depth and length”, add the subtitle “Dimensions for Adelie, Chinstrap, and Gentoo Penguins”\n\n\n\n\n\nggplot(\n  data = penguins,\n  mapping = aes(x = bill_depth_mm, y = bill_length_mm,color = species)\n  ) +\n  geom_point()  +\n  labs(\n    title = \"Bill depth and length\",\n    subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\"\n  )"
  },
  {
    "objectID": "slides/ggplot2/ggplot2.html#section-7",
    "href": "slides/ggplot2/ggplot2.html#section-7",
    "title": "Visualising data with ggplot2",
    "section": "",
    "text": "Start with the penguins data frame, map bill depth to the x-axis and map bill length to the y-axis. Represent each observation with a point and map species to the color of each point. Title the plot “Bill depth and length”, add the subtitle “Dimensions for Adelie, Chinstrap, and Gentoo Penguins”, label the x and y axes as “Bill depth (mm)” and “Bill length (mm)”, respectively\n\n\n\n\n\nggplot(\n  data = penguins,\n  mapping = aes(x = bill_depth_mm, y = bill_length_mm,color = species)\n  ) +\n  geom_point()  +\n  labs(\n    title = \"Bill depth and length\",\n    subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n    x = \"Bill depth (mm)\", y = \"Bill length (mm)\"\n  )"
  },
  {
    "objectID": "slides/ggplot2/ggplot2.html#section-8",
    "href": "slides/ggplot2/ggplot2.html#section-8",
    "title": "Visualising data with ggplot2",
    "section": "",
    "text": "Start with the penguins data frame, map bill depth to the x-axis and map bill length to the y-axis. Represent each observation with a point and map species to the color of each point. Title the plot “Bill depth and length”, add the subtitle “Dimensions for Adelie, Chinstrap, and Gentoo Penguins”, label the x and y axes as “Bill depth (mm)” and “Bill length (mm)”, respectively, label the legend “Species”\n\n\n\n\n\nggplot(\n  data = penguins,\n  mapping = aes(x = bill_depth_mm, y = bill_length_mm,color = species)\n  ) +\n  geom_point() +\n  labs(\n    title = \"Bill depth and length\",\n    subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n     x = \"Bill depth (mm)\", y = \"Bill length (mm)\", \n    color = \"Species\"\n  )"
  },
  {
    "objectID": "slides/ggplot2/ggplot2.html#section-9",
    "href": "slides/ggplot2/ggplot2.html#section-9",
    "title": "Visualising data with ggplot2",
    "section": "",
    "text": "Start with the penguins data frame, map bill depth to the x-axis and map bill length to the y-axis. Represent each observation with a point and map species to the color of each point. Title the plot “Bill depth and length”, add the subtitle “Dimensions for Adelie, Chinstrap, and Gentoo Penguins”, label the x and y axes as “Bill depth (mm)” and “Bill length (mm)”, respectively, label the legend “Species”, and add a caption for the data source.\n\n\n\n\n\nggplot(\n  data = penguins,\n  mapping = aes(x = bill_depth_mm, y = bill_length_mm,color = species)\n  ) +\n  geom_point() +\n  labs(\n    title = \"Bill depth and length\",\n    subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n    x = \"Bill depth (mm)\", y = \"Bill length (mm)\", \n    color = \"Species\",\n    caption = \"Source: Palmer Station LTER / palmerpenguins package\"\n  )"
  },
  {
    "objectID": "slides/ggplot2/ggplot2.html#section-10",
    "href": "slides/ggplot2/ggplot2.html#section-10",
    "title": "Visualising data with ggplot2",
    "section": "",
    "text": "Start with the penguins data frame, map bill depth to the x-axis and map bill length to the y-axis. Represent each observation with a point and map species to the color of each point. Title the plot “Bill depth and length”, add the subtitle “Dimensions for Adelie, Chinstrap, and Gentoo Penguins”, label the x and y axes as “Bill depth (mm)” and “Bill length (mm)”, respectively, label the legend “Species”, and add a caption for the data source. Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness.\n\n\n\n\n\nggplot(\n  data = penguins,\n  mapping = aes(x = bill_depth_mm, y = bill_length_mm,color = species)\n  ) +\n  geom_point() +\n  labs(\n    title = \"Bill depth and length\",\n    subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n    x = \"Bill depth (mm)\", y = \"Bill length (mm)\", \n    color = \"Species\",\n    caption = \"Source: Palmer Station LTER / palmerpenguins package\"\n  ) +\n  scale_color_viridis_d()"
  },
  {
    "objectID": "slides/ggplot2/ggplot2.html#section-11",
    "href": "slides/ggplot2/ggplot2.html#section-11",
    "title": "Visualising data with ggplot2",
    "section": "",
    "text": "CodePlotNarrative\n\n\n\nggplot(\n  data = penguins, \n  mapping = aes(x = bill_depth_mm, y = bill_length_mm, color = species)\n  ) +\n  geom_point() +\n  labs(\n    title = \"Bill depth and length\",\n    subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n    x = \"Bill depth (mm)\", y = \"Bill length (mm)\",\n    color = \"Species\",\n    caption = \"Source: Palmer Station LTER / palmerpenguins package\"\n  ) +\n  scale_color_viridis_d()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStart with the penguins data frame, map bill depth to the x-axis and map bill length to the y-axis.\nRepresent each observation with a point and map species to the color of each point.\nTitle the plot “Bill depth and length”, add the subtitle “Dimensions for Adelie, Chinstrap, and Gentoo Penguins”, label the x and y axes as “Bill depth (mm)” and “Bill length (mm)”, respectively, label the legend “Species”, and add a caption for the data source.\nFinally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness."
  },
  {
    "objectID": "slides/ggplot2/ggplot2.html#argument-names",
    "href": "slides/ggplot2/ggplot2.html#argument-names",
    "title": "Visualising data with ggplot2",
    "section": "Argument names",
    "text": "Argument names\n\n\n\n\n\n\nTip\n\n\nYou can omit the names of first two arguments when building plots with ggplot().\n\n\n\n\n\n\nggplot(\n  data = penguins,\n  mapping = aes(\n    x = bill_depth_mm,\n    y = bill_length_mm,\n    color = species\n    )\n  ) +\n  geom_point() +\n  scale_color_viridis_d()\n\n\n\nggplot(\n  penguins,\n  aes(\n    x = bill_depth_mm,\n    y = bill_length_mm,\n    color = species\n    )\n  ) +\n  geom_point() +\n  scale_color_viridis_d()"
  }
]